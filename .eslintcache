[{"/Users/mak/Documents/hotel-toxin/src/components/air-datepicker/air-datepicker.js":"1","/Users/mak/Documents/hotel-toxin/src/components/card-product/card-product.js":"2","/Users/mak/Documents/hotel-toxin/src/components/chart/chart.js":"3","/Users/mak/Documents/hotel-toxin/src/components/collapse/collapse.js":"4","/Users/mak/Documents/hotel-toxin/src/components/curtain/curtain.js":"5","/Users/mak/Documents/hotel-toxin/src/components/dropdown/dropdown.js":"6","/Users/mak/Documents/hotel-toxin/src/components/filter-products/filter-products.js":"7","/Users/mak/Documents/hotel-toxin/src/components/footer/footer.js":"8","/Users/mak/Documents/hotel-toxin/src/components/header/header.js":"9","/Users/mak/Documents/hotel-toxin/src/components/input/input.js":"10","/Users/mak/Documents/hotel-toxin/src/components/like-btn/like-btn.js":"11","/Users/mak/Documents/hotel-toxin/src/components/pagination/jquery.paging.js":"12","/Users/mak/Documents/hotel-toxin/src/components/pagination/pagination.js":"13","/Users/mak/Documents/hotel-toxin/src/components/rate-btn/rate-btn.js":"14","/Users/mak/Documents/hotel-toxin/src/components/scrollbar/scrollbar.js":"15","/Users/mak/Documents/hotel-toxin/src/components/slider-range/slider-range.js":"16","/Users/mak/Documents/hotel-toxin/src/entry.js":"17","/Users/mak/Documents/hotel-toxin/src/pages/guide/guide.js":"18","/Users/mak/Documents/hotel-toxin/src/pages/index/index.js":"19","/Users/mak/Documents/hotel-toxin/src/pages/product/product.js":"20","/Users/mak/Documents/hotel-toxin/src/pages/products/products.js":"21","/Users/mak/Documents/hotel-toxin/src/components/input-number/input-number.js":"22","/Users/mak/Documents/hotel-toxin/src/components/list-counters/list-counters.js":"23"},{"size":1713,"mtime":1626684008429,"results":"24","hashOfConfig":"25"},{"size":249,"mtime":1626253244125,"results":"26","hashOfConfig":"25"},{"size":2266,"mtime":1626683809754,"results":"27","hashOfConfig":"25"},{"size":824,"mtime":1626684040257,"results":"28","hashOfConfig":"25"},{"size":1100,"mtime":1626684105081,"results":"29","hashOfConfig":"25"},{"size":1213,"mtime":1626684152877,"results":"30","hashOfConfig":"25"},{"size":1367,"mtime":1626685323240,"results":"31","hashOfConfig":"25"},{"size":0,"mtime":1594819946000,"results":"32","hashOfConfig":"25"},{"size":0,"mtime":1594819946000,"results":"33","hashOfConfig":"25"},{"size":315,"mtime":1626248645226,"results":"34","hashOfConfig":"25"},{"size":136,"mtime":1626248655384,"results":"35","hashOfConfig":"25"},{"size":20682,"mtime":1594819946000,"results":"36","hashOfConfig":"25"},{"size":2663,"mtime":1626685735259,"results":"37","hashOfConfig":"25"},{"size":857,"mtime":1626248677215,"results":"38","hashOfConfig":"25"},{"size":220,"mtime":1626743941503,"results":"39","hashOfConfig":"25"},{"size":970,"mtime":1626248694084,"results":"40","hashOfConfig":"25"},{"size":1275,"mtime":1626743997728,"results":"41","hashOfConfig":"25"},{"size":0,"mtime":1594819946000,"results":"42","hashOfConfig":"25"},{"size":0,"mtime":1594819946000,"results":"43","hashOfConfig":"25"},{"size":237,"mtime":1626744060811,"results":"44","hashOfConfig":"25"},{"size":611,"mtime":1626744228519,"results":"45","hashOfConfig":"25"},{"size":1976,"mtime":1626685498288,"results":"46","hashOfConfig":"25"},{"size":3021,"mtime":1626677890111,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8y55i7",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":13,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},"/Users/mak/Documents/hotel-toxin/src/components/air-datepicker/air-datepicker.js",[],"/Users/mak/Documents/hotel-toxin/src/components/card-product/card-product.js",[],"/Users/mak/Documents/hotel-toxin/src/components/chart/chart.js",[],"/Users/mak/Documents/hotel-toxin/src/components/collapse/collapse.js",[],"/Users/mak/Documents/hotel-toxin/src/components/curtain/curtain.js",[],"/Users/mak/Documents/hotel-toxin/src/components/dropdown/dropdown.js",[],"/Users/mak/Documents/hotel-toxin/src/components/filter-products/filter-products.js",[],"/Users/mak/Documents/hotel-toxin/src/components/footer/footer.js",[],"/Users/mak/Documents/hotel-toxin/src/components/header/header.js",[],"/Users/mak/Documents/hotel-toxin/src/components/input/input.js",[],"/Users/mak/Documents/hotel-toxin/src/components/like-btn/like-btn.js",[],"/Users/mak/Documents/hotel-toxin/src/components/pagination/jquery.paging.js",["97","98","99","100","101","102","103","104","105","106","107","108","109"],"/**\n * @license jQuery paging plugin v1.3.1 23/06/2014\n * http://www.xarg.org/2011/09/jquery-pagination-revised/\n *\n * Copyright (c) 2011, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n(function($, window, undefined) {\n\n\n    $[\"fn\"][\"paging\"] = function(number, opts) {\n\n        var self = this,\n        Paging = {\n\n            \"setOptions\": function(opts) {\n\n                var parseFormat = function(format) {\n\n                    var gndx = 0, group = 0, num = 1, res = {\n                        fstack:    [], // format stack\n                        asterisk:  0, // asterisk?\n                        inactive:  0, // fill empty pages with inactives up to w?\n                        blockwide: 5, // width of number block\n                        current:   3, // position of current element in number block\n                        rights:    0, // num of rights\n                        lefts:     0 // num of lefts\n                    }, tok, pattern = /[*<>pq\\[\\]().-]|[nc]+!?/g;\n\n                    var known = {\n                        \"[\": \"first\",\n                        \"]\": \"last\",\n                        \"<\": \"prev\",\n                        \">\": \"next\",\n                        \"q\": \"left\",\n                        \"p\": \"right\",\n                        \"-\": \"fill\",\n                        \".\": \"leap\"\n                    }, count = {};\n\n                    while ((tok = pattern[\"exec\"](format))) {\n\n                        tok = \"\" + (tok);\n\n                        if (undefined === known[tok]) {\n\n                            if (\"(\" === tok) {\n                                group = ++gndx;\n                            } else if (\")\" === tok) {\n                                group = 0;\n                            } else if (num) {\n\n                                if (\"*\" === tok) {\n                                    res.asterisk = 1;\n                                    res.inactive = 0;\n                                } else {\n                                    // number block is the only thing left here\n                                    res.asterisk = 0;\n                                    res.inactive = \"!\" === tok.charAt(tok.length - 1);\n                                    res.blockwide = tok[\"length\"] - res.inactive;\n                                    if (!(res.current = 1 + tok.indexOf(\"c\"))) {\n                                        res.current = (1 + res.blockwide) >> 1;\n                                    }\n                                }\n\n                                res.fstack.push({\n                                    ftype: \"block\", // type\n                                    fgroup: 0,      // group\n                                    fpos: 0         // pos\n                                });\n                                num = 0;\n                            }\n\n                        } else {\n\n                            res.fstack.push({\n                                ftype: known[tok], // type\n                                fgroup: group,     // group\n                                fpos: undefined === count[tok] ? count[tok] = 1 : ++count[tok] // pos\n                            });\n\n                            if (\"q\" === tok)\n                                ++res.lefts;\n                            else if (\"p\" === tok)\n                                ++res.rights;\n                        }\n                    }\n                    return res;\n                };\n\n                Paging.opts = $.extend(Paging.opts || {\n\n                    \"lapping\": 0, // number of elements overlap\n\n                    \"perpage\": 10, // number of elements per page\n\n                    \"page\": 1, // current page\n                    \n                    \"stepwidth\": 1, // stepwidth for prev/next -> if = 0 then blockwise steps\n\n                    \"refresh\": {\n                        \"interval\": 10,\n                        \"url\": null\n                    }, // refresh callback information\n\n                    \"format\": \"\", // visual format string\n\n                    \"lock\": false, // set to true, if you want to disable the pagination for a while. \n\n                    \"circular\": false, // set to true if you want the next/prev buttons go circular\n\n                    \"onClick\": null, // Alternative click handler to bypass onSelect mechanism\n\n                    \"onFormat\": function(type) {\t// callback for every format element\n\n                    /** EXAMPLE **\n\n                        switch (type) {\n\n                            case 'block':\n\n                                if (!this.active)\n                                    return '<span class=\"disabled\">' + this.value + '</span>';\n                                else if (this.value != this.page)\n                                    return '<em><a href=\"#' + this.value + '\">' + this.value + '</a></em>';\n                                return '<span class=\"current\">' + this.value + '</span>';\n\n                            case 'right':\n                            case 'left':\n\n                                if (!this.active) {\n                                    return \"\";\n                                }\n                                return '<a href=\"#' + this.value + '\">' + this.value + '</a>';\n\n                            case 'next':\n\n                                if (this.active) {\n                                    return '<a href=\"#' + this.value + '\" class=\"next\">Next &raquo;</a>';\n                                }\n                                return '<span class=\"disabled\">Next &raquo;</span>';\n\n                            case 'prev':\n\n                                if (this.active) {\n                                    return '<a href=\"#' + this.value + '\" class=\"prev\">&laquo; Previous</a>';\n                                }\n                                return '<span class=\"disabled\">&laquo; Previous</span>';\n\n                            case 'first':\n\n                                if (this.active) {\n                                    return '<a href=\"#' + this.value + '\" class=\"first\">|&lt;</a>';\n                                }\n                                return '<span class=\"disabled\">|&lt;</span>';\n\n                            case 'last':\n\n                                if (this.active) {\n                                    return '<a href=\"#' + this.value + '\" class=\"prev\">&gt;|</a>';\n                                }\n                                return '<span class=\"disabled\">&gt;|</span>';\n\n                            case 'fill':\n                                if (this.active) {\n                                    return \"...\";\n                                }\n                        }\n                        return \"\"; // return nothing for missing branches\n\n                        **/\n                    },\n                    \"onSelect\": function(page) {\t// callback for page selection\n\n                        /** EXAMPLE SLICE **\n\n                        var data = this.slice;\n\n                        content.slice(prev[0], prev[1]).css('display', 'none');\n                        content.slice(data[0], data[1]).css('display', 'block');\n\n                        prev = data;\n\n                        **/\n\n\n                        /** EXAMPLE AJAX **\n\n                        $.ajax({\n                            \"url\": '/data.php?start=' + this.slice[0] + '&end=' + this.slice[1] + '&page=' + page,\n                            \"success\": function(data) {\n                                // content replace\n                            }\n                        });\n\n                        **/\n\n                        // Return code indicates if the link of the clicked format element should be followed (otherwise only the click-event is used)\n                        return true;\n                    },\n                    \"onRefresh\": function(json) { // callback for new data of refresh api\n\n                        /** EXAMPLE **\n                        if (json.number) {\n                            Paging.setNumber(json.number);\n                        }\n\n                        if (json.options) {\n                            Paging.setOptions(json.options);\n                        }\n\n                        Paging.setPage(); // Call with empty params to reload the paginator\n                        **/\n                    }\n                }, opts || {});\n\n                Paging.opts[\"lapping\"]|= 0;\n                Paging.opts[\"perpage\"]|= 0;\n                if (Paging.opts[\"page\"] !== null)\n                    Paging.opts[\"page\"]|= 0;\n\n                // If the number of elements per page is less then 1, set it to default\n                if (Paging.opts[\"perpage\"] < 1) {\n                    Paging.opts[\"perpage\"] = 10;\n                }\n\n                if (Paging.interval)\n                    window.clearInterval(Paging.interval);\n\n                if (Paging.opts[\"refresh\"][\"url\"]) {\n\n                    Paging.interval = window.setInterval(function() {\n\n                        $[\"ajax\"]({\n                            \"url\": Paging.opts[\"refresh\"][\"url\"],\n                            \"success\": function(data) {\n\n                                if (typeof(data) === \"string\") {\n\n                                    try {\n                                        data = $[\"parseJSON\"](data);\n                                    } catch (o) {\n                                        return;\n                                    }\n                                }\n                                Paging.opts[\"onRefresh\"](data);\n                            }\n                        });\n\n                    }, 1000 * Paging.opts[\"refresh\"][\"interval\"]);\n                }\n\n                Paging.format = parseFormat(Paging.opts[\"format\"]);\n                return Paging;\n            },\n\n            \"setNumber\": function(number) {\n                Paging.number = (undefined === number || number < 0) ? -1 : number;\n                return Paging;\n            },\n\n            \"setPage\": function(page) {\n\n                if (Paging.opts[\"lock\"]) {\n                    Paging.opts[\"onSelect\"](0, self);\n                    return Paging;\n                }\n\n                if (undefined === page) {\n\n                    page = Paging.opts[\"page\"];\n\n                    if (null === page) {\n                        return Paging;\n                    }\n\n                } else if (Paging.opts[\"page\"] == page) { // Necessary to be ==, not ===\n                    return Paging;\n                }\n\n                Paging.opts[\"page\"] = (page|= 0);\n\n                var number = Paging.number;\n                var opts = Paging.opts;\n\n                var rStart, rStop;\n\n                var pages, buffer;\n\n                var groups = 1, format = Paging.format;\n\n                var data, tmp, node, lapping;\n\n                var count = format.fstack[\"length\"], i = count;\n\n\n                // If the lapping is greater than perpage, reduce it to perpage - 1 to avoid endless loops\n                if (opts[\"perpage\"] <= opts[\"lapping\"]) {\n                    opts[\"lapping\"] = opts[\"perpage\"] - 1;\n                }\n\n                lapping = number <= opts[\"lapping\"] ? 0 : opts[\"lapping\"] | 0;\n\n\n                // If the number is negative, the value doesn\"t matter, we loop endlessly with a constant width\n                if (number < 0) {\n\n                    number = -1;\n                    pages = -1;\n\n                    rStart = Math.max(1, page - format.current + 1 - lapping);\n                    rStop  = rStart + format.blockwide;\n\n                } else {\n\n                    /* Calculate the number of pages\n                     * http://www.xarg.org/2016/10/derivation-of-pagination-calculation/\n                     *\n                     */\n                    pages = 1 + Math.ceil((number - opts[\"perpage\"]) / (opts[\"perpage\"] - lapping));\n\n                    // If current page is negative, start at the end and\n                    // Set the current page into a valid range, includes 0, which is set to 1\n                    page = Math.max(1, Math.min(page < 0 ? 1 + pages + page : page, pages));\n\n                    // Do we need to print all numbers?\n                    if (format.asterisk) {\n                        rStart = 1;\n                        rStop  = 1 + pages;\n\n                        // Disable :first and :last for asterisk mode as we see all buttons\n                        format.current   = page;\n                        format.blockwide = pages;\n\n                    } else {\n\n                        // If no, start at the best position and stop at max width or at num of pages\n                        rStart = Math.max(1, Math.min(page - format.current, pages - format.blockwide) + 1);\n                        rStop = format.inactive ? rStart + format.blockwide : Math.min(rStart + format.blockwide, 1 + pages);\n                    }\n                }\n\n                while (i--) {\n\n                    tmp = 0; // default everything is visible\n                    node = format.fstack[i];\n\n                    switch (node.ftype) {\n\n                        case \"left\":\n                            tmp = (node.fpos < rStart);\n                            break;\n                        case \"right\":\n                            tmp = (rStop <= pages - format.rights + node.fpos);\n                            break;\n\n                        case \"first\":\n                            tmp = (format.current < page);\n                            break;\n                        case \"last\":\n                            tmp = (format.blockwide < format.current + pages - page);\n                            break;\n\n                        case \"prev\":\n                            tmp = (1 < page);\n                            break;\n                        case \"next\":\n                            tmp = (page < pages);\n                            break;\n                    }\n                    groups|= tmp << node.fgroup; // group visible?\n                }\n\n                data = {\n                    \"number\":   number, // number of elements\n                    \"lapping\":  lapping, // overlapping\n                    \"pages\":    pages, // number of pages\n                    \"perpage\":  opts[\"perpage\"], // number of elements per page\n                    \"page\":     page, // current page\n                    \"slice\": [ // two element array with bounds of the current page selection\n                        (tmp = page * (opts[\"perpage\"] - lapping) + lapping) - opts[\"perpage\"], // Lower bound\n                        Math.min(tmp, number) // Upper bound\n                    ]\n                };\n\n                buffer = \"\";\n\n                function buffer_append(opts, data, type) {\n\n                    type = \"\" + (opts[\"onFormat\"].call(data, type));\n\n                    if (data[\"value\"]) {\n                        buffer += type.replace(/<a/i, '<a data-page=\"' + data[\"value\"] + '\"');\n                    } else {\n                        buffer += type;\n                    }\n                }\n\n                while (++i < count) {\n\n                    node = format.fstack[i];\n\n                    tmp = (groups >> node.fgroup & 1);\n\n                    switch (node.ftype) {\n                        case \"block\":\n                            for (; rStart < rStop; ++rStart) {\n\n                                data[\"value\"]  = rStart;\n                                data[\"pos\"]    = 1 + format.blockwide - rStop + rStart;\n\n                                data[\"active\"] = rStart <= pages || number < 0;     // true if infinity series and rStart <= pages\n                                data[\"first\"]  = 1 === rStart;                      // check if it is the first page\n                                data[\"last\"]   = rStart === pages && 0 < number;    // false if infinity series or rStart != pages\n\n                                buffer_append(opts, data, node.ftype);\n                            }\n                            continue;\n\n                        case \"left\":\n                            data[\"value\"]  = node.fpos;\n                            data[\"active\"] = node.fpos < rStart; // Don't take group-visibility into account!\n                            break;\n\n                        case \"right\":\n                            data[\"value\"]  = pages - format.rights + node.fpos;\n                            data[\"active\"] = rStop <= data[\"value\"]; // Don't take group-visibility into account!\n                            break;\n\n                        case \"prev\":\n                        case \"next\":\n                          \n                            var p_ = 0;\n                            \n                            if (opts[\"stepwidth\"] === 0) {\n                              \n                              if (node.ftype === \"next\") {\n\n                                if (page <= format.current) {\n                                  p_ = format.current + format.blockwide;\n                                } else {\n                                  p_ = page + format.blockwide;\n                                }\n                                \n                              } else {\n                                p_ = page - format.blockwide;\n                              }\n                              \n                            } else {\n                              p_ = node.ftype ===\"next\" ? page + opts[\"stepwidth\"] : page - opts[\"stepwidth\"];\n                            }\n                            \n                            if (opts[\"circular\"]) {\n                                data[\"active\"] = 1;\n                                data[\"value\"]  = 1 + (pages + p_ - 1) % pages;\n                            } else if (node.ftype === \"next\" && number < 0) { // if type=next and infinity navigation\n                                data[\"active\"] = 1;\n                                data[\"value\"]  = p_;\n                            } else {\n                                data[\"value\"]  = Math.max(1, Math.min(p_, pages));\n                                data[\"active\"] = tmp && 1 < page && page < pages;\n                            }\n                            break;\n\n                        case \"first\":\n                            data[\"value\"]  = 1;\n                            data[\"active\"] = tmp && 1 < page;\n                            break;\n\n                        case \"last\":\n                            if (number < 0) {\n                                data[\"active\"]  = 1;\n                                data[\"value\"]   = 1 + page;\n                            } else {\n                                data[\"value\"]   = pages;\n                                data[\"active\"]  = tmp && page < pages;\n                            }\n                            break;\n\n                        case \"leap\":\n                        case \"fill\":\n                            data[\"pos\"]    = node.fpos;\n                            data[\"active\"] = tmp; // tmp is true by default and changes only for group behaviour\n                            buffer_append(opts, data, node.ftype);\n                            continue;\n                    }\n\n                    data[\"pos\"]   = node.fpos;\n                    data[\"last\"]  = /* void */\n                    data[\"first\"] = undefined;\n\n                    buffer_append(opts, data, node.ftype);\n                }\n\n                if (self.length) {\n\n                    $(\"a\", self[\"html\"](buffer)).click(opts['onClick'] || function(ev) {\n                        ev[\"preventDefault\"]();\n\n                        var obj = this;\n\n                        do {\n\n                            if ('a' === obj[\"nodeName\"].toLowerCase()) {\n                                break;\n                            }\n\n                        } while ((obj = obj[\"parentNode\"]));\n\n                        Paging[\"setPage\"]($(obj).data(\"page\"));\n\n                        if (Paging.locate) {\n                            window.location = obj[\"href\"];\n                        }\n                    });\n\n                    Paging.locate = opts[\"onSelect\"].call({\n                        \"number\":   number,\n                        \"lapping\":  lapping,\n                        \"pages\":    pages,\n                        \"slice\":    data[\"slice\"]\n                    }, page, self);\n                }\n                return Paging;\n            }\n        };\n\n        return Paging\n                [\"setNumber\"](number)\n                [\"setOptions\"](opts)\n                [\"setPage\"]();\n    };\n\n}(jQuery, this));\n","/Users/mak/Documents/hotel-toxin/src/components/pagination/pagination.js",[],"/Users/mak/Documents/hotel-toxin/src/components/rate-btn/rate-btn.js",[],"/Users/mak/Documents/hotel-toxin/src/components/scrollbar/scrollbar.js",[],"/Users/mak/Documents/hotel-toxin/src/components/slider-range/slider-range.js",[],"/Users/mak/Documents/hotel-toxin/src/entry.js",["110","111","112","113"],"import $ from 'jquery';\nimport 'normalize.css';\nimport './theme/global.scss';\n\n$.RUBLE = '₽';\n\n$.COLORS = {\n  dark:     '#1f2041',\n  dark75:   'rgba(#1f2041, .75)',\n  dark50:   'rgba(#1f2041, .50)',\n  dark30:   'rgba(#1f2041, .30)',\n  dark25:   'rgba(#1f2041, .25)',\n  dark10:   'rgba(#1f2041, .1)',\n  dark5:    'rgba(#1f2041, .05)',\n  white:    '#fff',\n  purple:   '#bc9cff',\n  green:    '#6fcf97',\n  black:    '#000',\n};\n\n$.GRADIENTS = {\n  gradient1: 'linear-gradient(180deg, ' + $.COLORS.purple + ' 0%, #8BA4F9 100%)',\n  gradient2: 'linear-gradient(180deg, ' + $.COLORS.green + ' 0%, #66D2EA 100%)',\n  gradient3: 'linear-gradient(180deg, #FFE39C 0%, #FFBA9C 100%)',\n  gradient4: 'linear-gradient(180deg, #919191 0%, #3D4975 100%)',\n};\n\n$.BREAKPOINTS = {\n  xxs: 320,\n  xs: 575,\n  sm: 767,\n  md: 991,\n  lg: 1199,\n  xl: 1440,\n};\n\nfunction requireAll(requireContext) {\n  return requireContext.keys().map(requireContext);\n}\n\nrequireAll(require.context('./components', true, /^\\.\\/(?!.*(?:__tests__)).*\\.(js?)$/));\nrequireAll(require.context('./pages', true, /^\\.\\/(?!.*(?:__tests__)).*\\.(js?)$/));\n\nrequireAll(require.context('./components', true, /^\\.\\/(?!.*(?:__tests__)).*\\.(scss?)$/));\nrequireAll(require.context('./pages', true, /^\\.\\/(?!.*(?:__tests__)).*\\.(scss?)$/));","/Users/mak/Documents/hotel-toxin/src/pages/guide/guide.js",[],"/Users/mak/Documents/hotel-toxin/src/pages/index/index.js",[],"/Users/mak/Documents/hotel-toxin/src/pages/product/product.js",[],"/Users/mak/Documents/hotel-toxin/src/pages/products/products.js",[],"/Users/mak/Documents/hotel-toxin/src/components/input-number/input-number.js",[],"/Users/mak/Documents/hotel-toxin/src/components/list-counters/list-counters.js",["114"],"import $ from 'jquery';\n\n$(document).ready(function(){\n  const $body = $('body');\n\n\n  $('.js-list-counters', $body).each(function(){\n    const $listCounters = $(this);\n    calcItemsListCounters($listCounters);\n  });\n\n\n  $body.on('click',\n    '.js-list-counters:not(.js-list-counters_simple) .js-list-counters__btn-reset .js-button',\n    function(event){\n      const $btn = $(event.currentTarget);\n      const $listCounters = $btn.closest('.js-list-counters');\n      $listCounters.find('.js-input-number .js-input-number__input').val(0).trigger('change');\n      calcItemsListCounters($listCounters);\n    }\n  );\n\n\n  $body.on('click',\n    '.js-list-counters:not(.js-list-counters_simple) .js-list-counters__btn-submit .js-button',\n    function(event){\n      const $btn = $(event.currentTarget);\n      const $listCounters = $btn.closest('.js-list-counters');\n\n      calcItemsListCounters($listCounters);\n    }\n  );\n\n\n  $body.on('change',\n    '.js-list-counters.list-counters_simple .js-input-number .js-input-number__input', \n    handlerChangeInputNumber\n  );\n\n\n  function handlerChangeInputNumber(event){\n    const $listCounters = $(event.currentTarget).closest('.js-list-counters');\n    const $dropdown = $listCounters.closest('.js-dropdown');\n    if( ! $dropdown?.length ){\n      return;\n    }\n\n    let result = '';\n    let countNotZeroItems = 0;\n    $listCounters.find('.js-list-counters__counter').each(function(i){\n      const $counterItem = $(this);\n      const valCounter = $('.js-input-number__input', $counterItem).val();\n      if( valCounter != 0 ){\n        if( countNotZeroItems !== 0 ){\n          result += ', ';\n        }\n\n        result += valCounter;\n        result += ' ';\n        result += $('.js-list-counters__counter-label', $counterItem).text();\n\n        countNotZeroItems++;\n      }\n\n    });\n\n    $dropdown.find('.js-dropdown__input-wrapper .js-input__field').val(result);\n  }\n\n\n  function calcItemsListCounters($listCounters){\n    if( ! $listCounters?.length ){\n      return 0;\n    }\n\n    let summ = 0;\n    $listCounters.find('.js-input-number .js-input-number__input').each(function(){\n      summ += parseInt( $(this).val() );\n    });\n\n    if( summ !== 0 ){\n      $listCounters.find('.js-list-counters__btn-reset').removeClass('list-counters_hidden');\n    } else{\n      $listCounters.find('.js-list-counters__btn-reset').addClass('list-counters_hidden');\n    }\n\n    const $dropdown = $listCounters.closest('.js-dropdown');\n    if( $dropdown.length ){\n      let text = '';\n\n      if( summ === 0 ){\n        text = $dropdown.attr('data-default-text') ? $dropdown.attr('data-default-text') : '';\n      } else if( summ === 1 ){\n        text = $dropdown.attr('data-text-one') ? $dropdown.attr('data-text-one') : '';\n        text = summ + ' ' + text;\n      } else{\n        text = $dropdown.attr('data-text-many') ? $dropdown.attr('data-text-many') : '';\n        text = summ + ' ' + text;\n      }\n      $dropdown.find('.js-dropdown__input-wrapper .js-input__field').val(text);\n    }\n\n    return summ;\n  }\n});",{"ruleId":"115","severity":2,"message":"116","line":9,"column":22,"nodeType":"117","endLine":9,"endColumn":31},{"ruleId":"118","severity":2,"message":"119","line":29,"column":46,"nodeType":"120","messageId":"121","endLine":29,"endColumn":47,"suggestions":"122"},{"ruleId":"123","severity":2,"message":"124","line":115,"column":42,"nodeType":"117","endLine":115,"endColumn":46},{"ruleId":"123","severity":2,"message":"125","line":174,"column":42,"nodeType":"117","endLine":174,"endColumn":46},{"ruleId":"126","severity":2,"message":"127","line":199,"column":1,"nodeType":"128","messageId":"129"},{"ruleId":"123","severity":2,"message":"130","line":202,"column":43,"nodeType":"117","endLine":202,"endColumn":47},{"ruleId":"126","severity":2,"message":"131","line":340,"column":1,"nodeType":"128","messageId":"129"},{"ruleId":"126","severity":2,"message":"132","line":413,"column":1,"nodeType":"128","messageId":"129"},{"ruleId":"126","severity":2,"message":"132","line":415,"column":1,"nodeType":"128","messageId":"129"},{"ruleId":"133","severity":2,"message":"134","line":530,"column":17,"nodeType":"117","messageId":"135"},{"ruleId":"133","severity":2,"message":"134","line":531,"column":17,"nodeType":"136","messageId":"135"},{"ruleId":"133","severity":2,"message":"134","line":532,"column":17,"nodeType":"136","messageId":"135"},{"ruleId":"137","severity":2,"message":"138","line":535,"column":3,"nodeType":"117","messageId":"139","endLine":535,"endColumn":9},{"ruleId":"137","severity":2,"message":"140","line":41,"column":12,"nodeType":"117","messageId":"139","endLine":41,"endColumn":19},{"ruleId":"137","severity":2,"message":"140","line":42,"column":12,"nodeType":"117","messageId":"139","endLine":42,"endColumn":19},{"ruleId":"137","severity":2,"message":"140","line":44,"column":12,"nodeType":"117","messageId":"139","endLine":44,"endColumn":19},{"ruleId":"137","severity":2,"message":"140","line":45,"column":12,"nodeType":"117","messageId":"139","endLine":45,"endColumn":19},{"ruleId":null,"fatal":true,"severity":2,"message":"141","line":44,"column":21},"no-shadow-restricted-names","Shadowing of global property 'undefined'.","Identifier","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["142","143"],"no-unused-vars","'type' is defined but never used.","'page' is defined but never used.","max-len","This line has a length of 150. Maximum allowed is 120.","Program","max","'json' is defined but never used.","This line has a length of 125. Maximum allowed is 120.","This line has a length of 130. Maximum allowed is 120.","no-unexpected-multiline","Unexpected newline between object and [ of property access.","property","CallExpression","no-undef","'jQuery' is not defined.","undef","'require' is not defined.","Parsing error: Unexpected token .",{"messageId":"144","fix":"145","desc":"146"},{"messageId":"147","fix":"148","desc":"149"},"removeEscape",{"range":"150","text":"151"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"152","text":"153"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1015,1016],"",[1015,1015],"\\"]